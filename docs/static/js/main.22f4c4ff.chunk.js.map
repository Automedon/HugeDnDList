{"version":3,"sources":["components/List.js","App.js","serviceWorker.js","index.js"],"names":["TreeNode","Tree","Search","Input","getParentKey","key","tree","parentKey","i","length","node","nodes","some","item","code","List","state","expandedKeys","searchValue","autoExpandParent","gData","dataList","onExpand","setState","onDrop","info","console","log","dragObj","dropKey","props","eventKey","dragKey","dragNode","dropPos","pos","split","dropPosition","Number","loop","data","callback","forEach","index","arr","splice","dropToGap","expanded","unshift","ar","push","onDragEnter","onChange","e","value","target","map","description","indexOf","filter","self","this","style","marginBottom","placeholder","className","checkable","draggable","blockNode","name","beforeStr","substr","afterStr","title","color","React","Component","App","Boolean","window","location","hostname","match","generateList","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22f4c4ff.chunk.js","sourcesContent":["import React from \"react\";\nimport { Tree, Input } from \"antd\";\nconst { TreeNode } = Tree;\nconst { Search } = Input;\n\nconst getParentKey = (key, tree) => {\n  let parentKey;\n  for (let i = 0; i < tree.length; i++) {\n    const node = tree[i];\n    if (node.nodes) {\n      if (node.nodes.some(item => item.code === key)) {\n        parentKey = node.code;\n      } else if (getParentKey(key, node.nodes)) {\n        parentKey = getParentKey(key, node.nodes);\n      }\n    }\n  }\n  return parentKey;\n};\nclass List extends React.Component {\n  state = {\n    expandedKeys: [],\n    searchValue: \"\",\n    autoExpandParent: true,\n    gData: [],\n    dataList: []\n  };\n  componentDidMount() {\n    this.setState({\n      gData: this.props.data,\n      dataList: this.props.dataList\n    });\n  }\n  onExpand = expandedKeys => {\n    this.setState({\n      expandedKeys,\n      autoExpandParent: false\n    });\n  };\n\n  onDrop = info => {\n    console.log(info);\n    const dropKey = info.node.props.eventKey;\n    const dragKey = info.dragNode.props.eventKey;\n    const dropPos = info.node.props.pos.split(\"-\");\n    const dropPosition =\n      info.dropPosition - Number(dropPos[dropPos.length - 1]);\n\n    const loop = (data, key, callback) => {\n      data.forEach((item, index, arr) => {\n        if (item.code === key) {\n          return callback(item, index, arr);\n        }\n        if (item.nodes) {\n          return loop(item.nodes, key, callback);\n        }\n      });\n    };\n    const data = [...this.state.gData];\n    let dragObj;\n    loop(data, dragKey, (item, index, arr) => {\n      arr.splice(index, 1);\n      dragObj = item;\n    });\n\n    if (!info.dropToGap) {\n      loop(data, dropKey, item => {\n        item.nodes = item.nodes || [];\n        item.nodes.push(dragObj);\n      });\n    } else if (\n      (info.node.props.nodes || []).length > 0 &&\n      info.node.props.expanded &&\n      dropPosition === 1\n    ) {\n      loop(data, dropKey, item => {\n        item.nodes = item.nodes || [];\n        item.nodes.unshift(dragObj);\n      });\n    } else {\n      let ar;\n      let i;\n      loop(data, dropKey, (item, index, arr) => {\n        ar = arr;\n        i = index;\n      });\n      if (dropPosition === -1) {\n        ar.splice(i, 0, dragObj);\n      } else {\n        ar.splice(i + 1, 0, dragObj);\n      }\n    }\n\n    this.setState({\n      gData: data\n    });\n  };\n  onDragEnter = info => {\n    this.setState({\n      expandedKeys: info.expandedKeys\n    });\n  };\n  onChange = e => {\n    const { value } = e.target;\n    if (value === \"\") {\n      this.setState({\n        expandedKeys: [],\n        searchValue: \"\"\n      });\n      return;\n    }\n    const { gData, dataList } = this.state;\n    const expandedKeys = dataList\n      .map(item => {\n        if (item.description.indexOf(value) > -1) {\n          return getParentKey(item.code, gData);\n        }\n        return null;\n      })\n      .filter((item, i, self) => item && self.indexOf(item) === i);\n    this.setState({\n      expandedKeys,\n      searchValue: value,\n      autoExpandParent: true\n    });\n  };\n\n  render() {\n    const { searchValue, expandedKeys, autoExpandParent, gData } = this.state;\n    const loop = data =>\n      data.map(item => {\n        const name = `${item.code} ${item.description}`;\n        const index = name.indexOf(searchValue);\n        const beforeStr = name.substr(0, index);\n        const afterStr = name.substr(index + searchValue.length);\n        const title =\n          index > -1 ? (\n            <span>\n              {beforeStr}\n              <span style={{ color: \"#f50\" }}>{searchValue}</span>\n              {afterStr}\n            </span>\n          ) : (\n            <span>{`${item.code} ${item.description}`}</span>\n          );\n        if (item.nodes) {\n          return (\n            <TreeNode key={item.code} title={title}>\n              {loop(item.nodes)}\n            </TreeNode>\n          );\n        }\n        return <TreeNode key={item.code} title={title} />;\n      });\n    return (\n      <>\n        <Search\n          style={{ marginBottom: 8 }}\n          placeholder=\"Search\"\n          onChange={this.onChange}\n        />\n        <Tree\n          className=\"draggable-tree\"\n          checkable\n          draggable\n          blockNode\n          onDragEnter={this.onDragEnter}\n          onDrop={this.onDrop}\n          onExpand={this.onExpand}\n          expandedKeys={expandedKeys}\n          autoExpandParent={autoExpandParent}\n        >\n          {loop(gData)}\n        </Tree>\n      </>\n    );\n  }\n}\n\nexport default List;\n","import React from \"react\";\nimport List from \"./components/List\";\n\nfunction App({ data, dataList }) {\n  return (\n    <>\n      <h3>Created by Automedon</h3>\n      <List data={data} dataList={dataList} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport data from \"./okveds\";\n\nconst dataList = [];\nconst generateList = data => {\n  for (let i = 0; i < data.length; i++) {\n    const node = data[i];\n    const { description, code } = node;\n    dataList.push({ code, description: `${code} ${description}` });\n    if (node.nodes) {\n      generateList(node.nodes);\n    }\n  }\n};\ngenerateList(data);\n\nReactDOM.render(\n  <App dataList={dataList} data={data} />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}